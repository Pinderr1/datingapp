rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function hasUidField(data) {
      return data != null && data.keys().hasAny(['uid']);
    }

    function ownerMatches(data) {
      return hasUidField(data) && data.uid == request.auth.uid;
    }

    function isMatchParticipant(data) {
      return data != null &&
             data.keys().hasAny(['users']) &&
             data.users is list &&
             data.users.hasAny([request.auth.uid]);
    }

    function likeDocumentShowsTrue(fromUid, toUid) {
      let likeDoc = get(/databases/$(database)/documents/likes/$(fromUid)/outgoing/$(toUid)).data;
      return likeDoc != null && likeDoc.liked == true;
    }

    function matchParticipantsHaveMutualLikes() {
      return request.resource.data != null &&
             request.resource.data.keys().hasAny(['users']) &&
             request.resource.data.users is list &&
             request.resource.data.users.size() == 2 &&
             request.resource.data.users[0] is string &&
             request.resource.data.users[1] is string &&
             request.resource.data.users[0] != request.resource.data.users[1] &&
             likeDocumentShowsTrue(request.resource.data.users[0], request.resource.data.users[1]) &&
             likeDocumentShowsTrue(request.resource.data.users[1], request.resource.data.users[0]);
    }

    function isGameParticipant(data) {
      return data != null &&
             data.keys().hasAny(['players']) &&
             data.players is list &&
             data.players.hasAny([request.auth.uid]);
    }

    function gameParticipantsMatchExistingMatch() {
      if (!(request.resource.data != null &&
            request.resource.data.keys().hasAny(['players']) &&
            request.resource.data.players is list &&
            request.resource.data.players.size() == 2)) {
        return false;
      }

      let firstPlayer = request.resource.data.players[0];
      let secondPlayer = request.resource.data.players[1];

      if (!(firstPlayer is string &&
            secondPlayer is string &&
            firstPlayer != secondPlayer)) {
        return false;
      }

      let matchId = firstPlayer < secondPlayer
        ? firstPlayer + '_' + secondPlayer
        : secondPlayer + '_' + firstPlayer;
      let matchDoc = get(/databases/$(database)/documents/matches/$(matchId)).data;

      if (matchDoc == null ||
          !matchDoc.keys().hasAny(['users']) ||
          !(matchDoc.users is list) ||
          !matchDoc.users.hasOnly([firstPlayer, secondPlayer])) {
        return false;
      }

      let playersUnchanged = true;
      if (resource != null &&
          resource.data != null &&
          resource.data.keys().hasAny(['players'])) {
        playersUnchanged = resource.data.players == request.resource.data.players;
      }

      let usersValid = true;
      if (request.resource.data.keys().hasAny(['users'])) {
        usersValid = request.resource.data.users is list &&
                     request.resource.data.users.hasOnly([firstPlayer, secondPlayer]);
      }

      return playersUnchanged && usersValid;
    }

    match /users/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
      allow create: if isSignedIn() &&
                     request.auth.uid == uid &&
                     hasUidField(request.resource.data) &&
                     request.resource.data.uid == uid;
      allow update: if isSignedIn() &&
                     request.auth.uid == uid &&
                     hasUidField(request.resource.data) &&
                     request.resource.data.uid == uid &&
                     hasUidField(resource.data) &&
                     resource.data.uid == uid;
      allow delete: if isSignedIn() &&
                     request.auth.uid == uid &&
                     ownerMatches(resource.data);
    }

    match /matches/{matchId} {
      allow get: if isSignedIn() && isMatchParticipant(resource.data);
      allow list: if isSignedIn() && isMatchParticipant(resource.data);
      allow create: if isSignedIn() &&
                    isMatchParticipant(request.resource.data) &&
                    matchParticipantsHaveMutualLikes();
      allow update: if isSignedIn() &&
                    isMatchParticipant(resource.data) &&
                    isMatchParticipant(request.resource.data) &&
                    matchParticipantsHaveMutualLikes();
      allow delete: if isSignedIn() && isMatchParticipant(resource.data);
    }

    match /matches/{matchId}/messages/{messageId} {
      allow read, create: if isSignedIn() &&
        isMatchParticipant(get(/databases/$(database)/documents/matches/$(matchId)).data);
    }

    match /sessions/{sessionId} {
      allow read, create, update, delete: if isSignedIn() && ownerMatches(request.resource.data);
    }

    match /games/{gameId} {
      allow get: if isSignedIn() && isGameParticipant(resource.data);
      allow list: if isSignedIn() && isGameParticipant(resource.data);
      allow create: if isSignedIn() &&
                    isGameParticipant(request.resource.data) &&
                    gameParticipantsMatchExistingMatch();
      allow update: if isSignedIn() &&
                    isGameParticipant(resource.data) &&
                    isGameParticipant(request.resource.data) &&
                    gameParticipantsMatchExistingMatch();
      allow delete: if isSignedIn() && isGameParticipant(resource.data);
    }

    match /games/{gameId}/moves/{moveId} {
      allow read, create: if isSignedIn() &&
        isGameParticipant(get(/databases/$(database)/documents/games/$(gameId)).data);
    }

    match /likes/{uid}/{direction}/{targetId} {
      allow read, write: if isSignedIn() &&
                         request.auth.uid == uid &&
                         direction == 'outgoing';
    }

    match /config/app {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
