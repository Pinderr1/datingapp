rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function hasUidField(data) {
      return data != null && data.keys().hasAny(['uid']);
    }

    function ownerMatches(data) {
      return !hasUidField(data) || (isSignedIn() && data.uid == request.auth.uid);
    }

    function isMatchParticipant(data) {
      return data != null &&
             data.keys().hasAny(['users']) &&
             data.users is list &&
             data.users.hasAny([request.auth.uid]);
    }

    function isGameParticipant(data) {
      return data != null &&
             data.keys().hasAny(['players']) &&
             data.players is list &&
             data.players.hasAny([request.auth.uid]);
    }

    match /users/{uid} {
      allow read: if isSignedIn();

      allow create: if isSignedIn() &&
                     request.auth.uid == uid &&
                     hasUidField(request.resource.data) &&
                     request.resource.data.uid == uid;

      allow update: if isSignedIn() &&
                     request.auth.uid == uid &&
                     hasUidField(request.resource.data) &&
                     request.resource.data.uid == uid &&
                     hasUidField(resource.data) &&
                     resource.data.uid == uid;

      allow delete: if isSignedIn() &&
                     request.auth.uid == uid &&
                     ownerMatches(resource.data);
    }

    match /matches/{matchId} {
      allow get: if isSignedIn() &&
                  (ownerMatches(resource.data) || isMatchParticipant(resource.data));

      allow list: if isSignedIn() &&
                   request.query != null &&
                   request.query.where('users', 'array-contains', request.auth.uid) == request.query;

      allow create: if isSignedIn() &&
                     ownerMatches(request.resource.data) &&
                     isMatchParticipant(request.resource.data);

      allow update: if isSignedIn() &&
                     ownerMatches(resource.data) &&
                     ownerMatches(request.resource.data) &&
                     isMatchParticipant(resource.data) &&
                     isMatchParticipant(request.resource.data);

      allow delete: if isSignedIn() &&
                     ownerMatches(resource.data) &&
                     isMatchParticipant(resource.data);
    }

    match /sessions/{sessionId} {
      allow read: if isSignedIn() && ownerMatches(resource.data);

      allow create: if isSignedIn() && ownerMatches(request.resource.data);

      allow update: if isSignedIn() &&
                     ownerMatches(resource.data) &&
                     ownerMatches(request.resource.data);

      allow delete: if isSignedIn() && ownerMatches(resource.data);
    }

    match /games/{gameId} {
      allow get: if isSignedIn() &&
                  (ownerMatches(resource.data) || isGameParticipant(resource.data));

      allow list: if isSignedIn() &&
                   request.query != null &&
                   request.query.where('players', 'array-contains', request.auth.uid) == request.query;

      allow create: if isSignedIn() &&
                     ownerMatches(request.resource.data) &&
                     isGameParticipant(request.resource.data);

      allow update: if isSignedIn() &&
                     ownerMatches(resource.data) &&
                     ownerMatches(request.resource.data) &&
                     isGameParticipant(resource.data) &&
                     isGameParticipant(request.resource.data);

      allow delete: if isSignedIn() &&
                     ownerMatches(resource.data) &&
                     isGameParticipant(resource.data);
    }

    match /config/app {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
