rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isParticipant(matchId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/matches/$(matchId)) &&
             request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.users;
    }

    match /users/{uid} {
      allow read: if isAuthenticated() && request.auth.uid == uid;
      allow create, update: if isAuthenticated() && request.auth.uid == uid;
    }

    match /swipes/{swipeId} {
      allow write: if isAuthenticated() && request.resource.data.from == request.auth.uid;
    }

    match /matches/{matchId} {
      allow read: if isParticipant(matchId);
      allow write: if false;

      match /messages/{messageId} {
        allow read: if isParticipant(matchId);
        allow create: if isParticipant(matchId) &&
                       request.resource.data.keys().hasOnly(["senderId", "content", "createdAt"]) &&
                       request.resource.data.keys().hasAll(["senderId", "content", "createdAt"]) &&
                       request.resource.data.senderId is string &&
                       request.resource.data.senderId == request.auth.uid &&
                       request.resource.data.content is string &&
                       request.resource.data.content.size() > 0 &&
                       request.resource.data.content.size() <= 2000 &&
                       request.resource.data.createdAt is timestamp;
      }
    }
  }
}
