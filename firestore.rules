rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function hasUidField(data) {
      return data != null && data.keys().hasAny(['uid']);
    }

    function ownerMatches(data) {
      return hasUidField(data) && data.uid == request.auth.uid;
    }

    function isMatchParticipant(data) {
      return data != null &&
             data.keys().hasAny(['users']) &&
             data.users is list &&
             data.users.hasAny([request.auth.uid]);
    }

    function isGameParticipant(data) {
      return data != null &&
             data.keys().hasAny(['players']) &&
             data.players is list &&
             data.players.hasAny([request.auth.uid]);
    }

    match /users/{uid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() &&
                     request.auth.uid == uid &&
                     hasUidField(request.resource.data) &&
                     request.resource.data.uid == uid;
      allow update: if isSignedIn() &&
                     request.auth.uid == uid &&
                     hasUidField(request.resource.data) &&
                     request.resource.data.uid == uid &&
                     hasUidField(resource.data) &&
                     resource.data.uid == uid;
      allow delete: if isSignedIn() &&
                     request.auth.uid == uid &&
                     ownerMatches(resource.data);
    }

    match /matches/{matchId} {
      allow get: if isSignedIn() && isMatchParticipant(resource.data);
      allow list: if isSignedIn() && isMatchParticipant(resource.data);
      allow create: if isSignedIn() && isMatchParticipant(request.resource.data);
      allow update: if isSignedIn() && isMatchParticipant(resource.data) && isMatchParticipant(request.resource.data);
      allow delete: if isSignedIn() && isMatchParticipant(resource.data);
    }

    match /matches/{matchId}/messages/{messageId} {
      allow read, create: if isSignedIn() &&
        isMatchParticipant(get(/databases/$(database)/documents/matches/$(matchId)).data);
    }

    match /sessions/{sessionId} {
      allow read, create, update, delete: if isSignedIn() && ownerMatches(request.resource.data);
    }

    match /games/{gameId} {
      allow get: if isSignedIn() && isGameParticipant(resource.data);
      allow list: if isSignedIn() && isGameParticipant(resource.data);
      allow create: if isSignedIn() && isGameParticipant(request.resource.data);
      allow update: if isSignedIn() && isGameParticipant(resource.data) && isGameParticipant(request.resource.data);
      allow delete: if isSignedIn() && isGameParticipant(resource.data);
    }

    match /games/{gameId}/moves/{moveId} {
      allow read, create: if isSignedIn() &&
        isGameParticipant(get(/databases/$(database)/documents/games/$(gameId)).data);
    }

    match /likes/{uid}/{direction}/{targetId} {
      allow read, write: if isSignedIn() && request.auth.uid == uid;
    }

    match /config/app {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
