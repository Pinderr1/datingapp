rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function hasOnlyAllowedUserKeys(data) {
      return data.keys().hasOnly([
        'uid', 'name', 'email', 'age', 'gender', 'photoURL', 'bio',
        'image', 'address', 'distance', 'profession', 'isFavorite', 'phoneNumber'
      ]);
    }

    function isValidUserCreate(data, uid) {
      // Create may be minimal at first login
      return data.keys().hasAll(['uid', 'email']) &&
             data.uid == uid &&
             data.email is string &&
             (!data.keys().hasAny(['name']) || data.name is string) &&
             (!data.keys().hasAny(['phoneNumber']) || data.phoneNumber is string);
    }

    function isValidUserUpdate(data, uid) {
      return hasOnlyAllowedUserKeys(data) &&
             data.uid == uid &&
             data.email is string &&
             (!data.keys().hasAny(['name']) || data.name is string) &&
             (!data.keys().hasAny(['age']) || (data.age is int && data.age >= 18 && data.age <= 120)) &&
             (!data.keys().hasAny(['gender']) || data.gender is string) &&
             (!data.keys().hasAny(['photoURL']) || data.photoURL is string) &&
             (!data.keys().hasAny(['bio']) || data.bio is string) &&
             (!data.keys().hasAny(['image']) || data.image is string) &&
             (!data.keys().hasAny(['address']) || data.address is string) &&
             (!data.keys().hasAny(['distance']) || (data.distance is number && data.distance >= 0)) &&
             (!data.keys().hasAny(['profession']) || data.profession is string) &&
             (!data.keys().hasAny(['isFavorite']) || data.isFavorite is bool) &&
             (!data.keys().hasAny(['phoneNumber']) || data.phoneNumber is string);
    }

    match /users/{uid} {
      // Read own profile
      allow get: if request.auth != null && request.auth.uid == uid;

      // First-time create: allow minimal shape
      allow create: if request.auth != null &&
                    request.auth.uid == uid &&
                    isValidUserCreate(request.resource.data, uid);

      // Updates/overwrites: validate full shape/types
      allow update: if request.auth != null &&
                    request.auth.uid == uid &&
                    isValidUserUpdate(request.resource.data, uid);
    }

    match /emailVerifications/{uid} {
      allow get: if request.auth != null && request.auth.uid == uid;

      allow create: if request.auth != null &&
                    request.auth.uid == uid &&
                    request.resource.data.keys().hasOnly([
                      'status', 'createdAt', 'updatedAt', 'tokenHash', 'lastError'
                    ]) &&
                    request.resource.data.status == 'pending' &&
                    request.resource.data.createdAt == request.time &&
                    request.resource.data.updatedAt == request.time &&
                    (!request.resource.data.keys().hasAny(['tokenHash']) || request.resource.data.tokenHash == null) &&
                    (!request.resource.data.keys().hasAny(['lastError']) || request.resource.data.lastError == null);

      allow update, delete: if request.auth != null && request.auth.token.admin == true;
    }

    function isValidContactMessage(data) {
      return data.keys().hasOnly(['name', 'email', 'message', 'createdAt']) &&
             data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.email is string && data.email.matches("^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$") &&
             data.message is string && data.message.size() > 0 && data.message.size() <= 2000 &&
             (!data.keys().hasAny(['createdAt']) || data.createdAt is timestamp);
    }

    match /contactMessages/{messageId} {
      allow create: if request.auth != null && isValidContactMessage(request.resource.data);
    }
  }
}
